//Saving SP to UPTR
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1]*16 ) + 13] = SP;
// Setting SP to beginning of kernel stack --  User Area Page number*512  - 1
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1]*16 ) + 11]*512 - 1;
backup;

//If swapping is initialized
if ([SYSTEM_STATUS_TABLE + 5] != 0) then
  //If swapper daemon process is running
  if (CORE==0 && [SYSTEM_STATUS_TABLE + 1] == 15) then
    if ([SYSTEM_STATUS_TABLE + 5] == SWAP_OUT) then
      //Calling swap_out function
      //Acquire kernel lock
      backup;
      R1 = 1;
      call MOD_8;
      restore;

      multipush(R0,R1);
      R1 = 1;
      call MOD_6;
      multipop(R0,R1);

      //Release kernel lock
      backup;
      R1 = 4;
      R2 = KERN_LOCK;
      call MOD_8;
      restore;
    endif;

    if ([SYSTEM_STATUS_TABLE + 5] == SWAP_IN) then
      //Calling swap_in function
      //Acquire kernel lock
      backup;
      R1 = 1;
      call MOD_8;
      restore;

      multipush(R0,R1);
      R1 = 2;
      call MOD_6;
      multipop(R0,R1);

      //Release kernel lock
      backup;
      R1 = 4;
      R2 = KERN_LOCK;
      call MOD_8;
      restore;
    endif;
  endif;
else
  //Check if swapping is to be initiated : MEM_FREE_COUNT < MEM_LOW
  if ([SYSTEM_STATUS_TABLE + 2] < MEM_LOW) then
    [SYSTEM_STATUS_TABLE + 5] = SWAP_OUT;
  else
    //If swapped count > 0
    if ( [SYSTEM_STATUS_TABLE + 4] != 0) then
      alias iter R3;
      iter = 3;
      while (iter<16) do
        alias process_table R7;
				process_table = PROCESS_TABLE + 16*iter;
				if((([process_table + 6] == 1) && ([process_table] > MAX_TICK)) || ([SYSTEM_STATUS_TABLE + 2] > MEM_HIGH)) then
					[SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
					break;
				endif;
        iter = iter + 1;
      endwhile;
    endif;
  endif;
endif;


//set state of current process to ready from running
[PROCESS_TABLE + (16 * [SYSTEM_STATUS_TABLE + (5 * CORE) + 1]) + 4] = READY;


//Incrementing tick field of each process
alias iter R4;
iter = 0;
while (iter<16) do
  if ([PROCESS_TABLE + iter*16 + 4] != TERMINATED) then
    [PROCESS_TABLE +iter*16] = [PROCESS_TABLE +iter*16] + 1;
  endif;
  iter = iter + 1;
endwhile;

call MOD_5;

restore;

// Changing SP to user stack
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1]*16 ) + 13];
//Setting mode flag to 0
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1]*16 ) + 9] = 0;
ireturn;
