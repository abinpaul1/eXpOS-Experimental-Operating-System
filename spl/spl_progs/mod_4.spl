alias functionNum R1;
alias currentPID R2;

//Disk store
if (functionNum==1) then
  alias pageNum R3;
  alias blockNum R4;

  //Calling acquire disk
  multipush(R0, R1, R2, R3, R4);
  R1 = 3;
  R2 = currentPID;
  call MOD_0;
  multipop(R0, R1, R2, R3, R4);

  //Updating Disk status table
  //Status = Busy--1
  [DISK_STATUS_TABLE] = 1;
  //Load - 0/ Store-1 Bit
  [DISK_STATUS_TABLE + 1] = 1;
  [DISK_STATUS_TABLE + 2] = pageNum;
  [DISK_STATUS_TABLE + 3] = blockNum;
  [DISK_STATUS_TABLE + 4] = currentPID;

  store(pageNum, blockNum);
  //Setting state of process as wait_disk
  [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
  backup;
  call MOD_5;
  restore;
  return;
endif;

//Disk Load
if (functionNum==2) then
  alias pageNum R3;
  alias blockNum R4;
  //Calling acquire disk
  multipush(R0, R1, R2, R3, R4);
  R1 = 3;
  R2 = currentPID;
  call MOD_0;
  multipop(R0, R1, R2, R3, R4);

  //Updating Disk status table
  //Status = Busy--1
  [DISK_STATUS_TABLE] = 1;
  //Load - 0/ Store-1 Bit
  [DISK_STATUS_TABLE + 1] = 0;
  [DISK_STATUS_TABLE + 2] = pageNum;
  [DISK_STATUS_TABLE + 3] = blockNum;
  [DISK_STATUS_TABLE + 4] = currentPID;

  load (pageNum, blockNum);
  //Setting state of process as wait_disk
  [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
  backup;
  call MOD_5;
  restore;
  return;
endif;


//Terminal write
if (functionNum==3) then
  //Acquiring Terminal
  alias word R3;
  multipush(R0, R1, R2, R3);
  //Storing function number in R1
  R1 = 8;
  R2 = currentPID;
  call MOD_0;
  multipop(R0, R1, R2, R3);
  print word;


  //Releasing terminal
  multipush(R0, R1, R2, R3);
  //Storing function number in R1
  R1 = 9;
  R2 = currentPID;
  call MOD_0;
  multipop(R0, R1, R2, R3);
  return;
endif;

//Terminal Read
if (functionNum==4) then
  alias word R3; //Address in which word is to be stored
  //Acquiring Terminal
  multipush(R0, R1, R2, R3);
  //Storing function number in R1
  R1 = 8;
  R2 = currentPID;
  call MOD_0;
  multipop(R0, R1, R2, R3);
  read;

  [PROCESS_TABLE + currentPID*16 + 4]=WAIT_TERMINAL;
  multipush(R0, R1, R2, R3);
  call MOD_5;
  multipop(R0, R1, R2, R3);
  alias input_word R4;
  input_word = [PROCESS_TABLE + currentPID*16 + 8];
  //Storing into R3--word
  [[PAGE_TABLE_BASE + currentPID*20 + 2*(word/512)]*512 + (word%512)]= input_word;
  return;
endif;
