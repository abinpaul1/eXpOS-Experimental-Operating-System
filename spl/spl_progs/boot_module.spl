// INIT Code
loadi(65,7);
loadi(66,8);

// Library loading
loadi(63,13);
loadi(64,14);

//INT 10 loading
loadi(22,35);
loadi(23,36);

//INT 7 loading
loadi(16,29);
loadi(17,30);

//Exception loading
loadi(2, 15);
loadi(3, 16);

// Timer interrupt loading
loadi(4, 17);
loadi(5, 18);

// Even program loading
loadi(83, 69);

//MOD 5 loading
loadi(50,63);
loadi(51,64);

//MOD 0 loading
loadi(40,53);
loadi(41,54);

//MOD 4 loading
loadi(48,61);
loadi(49,62);

//Setting terminal as free
[TERMINAL_STATUS_TABLE]=0;

//Setting PTBR for pid = 1, init process
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

// Shared Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


alias PROC_TAB R0;
PROC_TAB = PROCESS_TABLE + 16;
// Process table entry for init program
//pid = 1
[PROC_TAB + 1] = 1;
//Assigning UArea page number
[PROC_TAB + 11] = 80;
//State is CREATED as idle process is going to be scheduled first
[PROC_TAB + 4] = CREATED;
//Setting UPTR to stack logical address
[PROC_TAB + 13] = 8*512;
//Setting KPTR to 0
[PROC_TAB + 12] = 0;
//Setting PTBR
[PROC_TAB + 14] = PAGE_TABLE_BASE + 20;
//Setting PTLR
[PROC_TAB + 15] = 10;
//Stack pointer to entry point in code header
[76*512] = [65*512 + 1];


//Setting PTBR for pid = 2, even program process
PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;

// Shared Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 86;
[PTBR+5] = "0110";
[PTBR+6] = 87;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 84;
[PTBR+17] = "0110";
[PTBR+18] = 85;
[PTBR+19] = "0110";


PROC_TAB = PROCESS_TABLE + 32;
// Process table entry for even program
//pid = 2
[PROC_TAB + 1] = 2;
//Assigning UArea page number
[PROC_TAB + 11] = 88;
//State is CREATED
[PROC_TAB + 4] = CREATED;
//Setting UPTR to stack logical address
[PROC_TAB + 13] = 8*512;
//Setting KPTR to 0
[PROC_TAB + 12] = 0;
//Setting PTBR
[PROC_TAB + 14] = PAGE_TABLE_BASE + 40;
//Setting PTLR
[PROC_TAB + 15] = 10;
//Stack pointer to entry point in code header
[84*512] = [83*512 + 1];


//Setting all other process state as TERMINATED
alias iter R2;
iter = 3;
while (iter<=15) do
  [PROCESS_TABLE + iter*16 + 4] = TERMINATED;
  iter = iter + 1;
endwhile;

return;
