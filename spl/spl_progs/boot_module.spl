// INIT Code
loadi(65,7);
loadi(66,8);

// Library loading
loadi(63,13);
loadi(64,14);

//INT 10 loading
loadi(22,35);
loadi(23,36);

//INT 7 loading
loadi(16,29);
loadi(17,30);

//Exception handler loading
loadi(2, 15);
loadi(3, 16);

// Timer interrupt loading
loadi(4, 17);
loadi(5, 18);

//MOD 5 loading
loadi(50,63);
loadi(51,64);

//MOD 0 loading
loadi(40,53);
loadi(41,54);

//MOD 4 loading
loadi(48,61);
loadi(49,62);

//Console interrupt loading
loadi(8,21);
loadi(9,22);

//INT 6 loading
loadi(14,27);
loadi(15,28);

//INT 8 loading
loadi(18,31);
loadi(19,32);

//INT 9 loading
loadi(20,33);
loadi(21,34);

//INT 11 loading
loadi(24,37);
loadi(25,38);

//INT 15 loading
loadi(32,45);
loadi(33,46);

//MOD 1 loading
loadi(42,55);
loadi(43,56);

//MOD 2 loading
loadi(44,57);
loadi(45,58);

//Inode table + user table loading
loadi(59,3);
loadi(60,4);

//Disk interrupt loading
loadi(6,19);
loadi(7,20);

//Disk free list loading
loadi(61, 2);

//Initialize disk status to 0
[DISK_STATUS_TABLE] = 0;

alias iter R0;
//Initialize memory free list
iter = 0;
while (iter<83) do
  [MEMORY_FREE_LIST + iter] = 1;
  iter = iter + 1;
endwhile;
while (iter<128) do
  [MEMORY_FREE_LIST + iter] = 0;
  iter = iter + 1;
endwhile;

// Initialize MEM_FREE_COUNT to free pages -- (128-83 = 45)
[SYSTEM_STATUS_TABLE + 2] = 45;
//initialize WAIT_MEM_COUNT to 0
[SYSTEM_STATUS_TABLE + 3] = 0;

//Setting terminal as free
[TERMINAL_STATUS_TABLE]=0;

//Initializing disk map table entries of init -- pid =1
alias disk_map_entry R1;
disk_map_entry = DISK_MAP_TABLE + 10;

[disk_map_entry] = -1;
[disk_map_entry + 1] = -1;
[disk_map_entry + 2] = -1;
[disk_map_entry + 3] = -1;
[disk_map_entry + 4] = 7;
[disk_map_entry + 5] = 8;
[disk_map_entry + 6] = -1;
[disk_map_entry + 7] = -1;
[disk_map_entry + 8] = -1;
[disk_map_entry + 9] = -1;

//Invalidating per process resource table of INIT
iter = 0;
while (iter<8) do
  //Last 16 words of the User Area Page is used for per process resource table
  [80*512 + 496 + 2*iter] = -1;
  iter = iter + 1;
endwhile;

//Setting PTBR for pid = 1, init process
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

// Shared Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


alias PROC_TAB R2;
PROC_TAB = PROCESS_TABLE + 16;
// Process table entry for init program
//pid = 1
[PROC_TAB + 1] = 1;
//Assigning UArea page number
[PROC_TAB + 11] = 80;
//State is CREATED as idle process is going to be scheduled first
[PROC_TAB + 4] = CREATED;
//Setting UPTR to stack logical address
[PROC_TAB + 13] = 8*512;
//Setting KPTR to 0
[PROC_TAB + 12] = 0;
//Setting PTBR
[PROC_TAB + 14] = PAGE_TABLE_BASE + 20;
//Setting PTLR
[PROC_TAB + 15] = 10;
//Stack pointer to entry point in code header
[76*512] = [65*512 + 1];


//Setting all other process state as TERMINATED
iter = 2;
while (iter<=15) do
  [PROCESS_TABLE + iter*16 + 4] = TERMINATED;
  iter = iter + 1;
endwhile;

return;
