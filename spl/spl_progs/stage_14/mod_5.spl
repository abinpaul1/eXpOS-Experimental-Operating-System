alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

// Storing BP into kernel stack

SP = SP+1;
[SP] = BP;

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID*16;

[process_table_entry + 12] = SP%512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


alias newPID R2;
alias c_id R3;
alias temp_state R4;
alias temp_pid R5;

// Default new process is set as idle
newPID = 0;

alias iter R6;
iter = currentPID + 1;
//Iterating from next process
c_id = process_table_entry + 16;
// Loops till end of process table
while (iter<=15) do
    temp_pid = [c_id + 1];
  	temp_state = [c_id + 4];
  	if (temp_state == CREATED || temp_state == READY) then
          newPID = temp_pid;
          break;
  	endif;
  	c_id = c_id + 16;
    iter = iter + 1;
endwhile;

alias new_process_table R7;
new_process_table = PROCESS_TABLE + newPID*16;

SP = [new_process_table + 11]*512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE+1] = newPID;

if ([new_process_table + 4] == CREATED) then
    SP = [new_process_table + 13];
    [new_process_table + 4] = RUNNING;
    // Mode flag to 0
    [new_process_table + 9] = 0;
    ireturn;
endif;

[new_process_table + 4] = RUNNING;

//Restoring BP from kernel stack
BP = [SP];
SP = SP - 1;

return;
