//Get free Page-1 , Release Page Table-2, Get code page -5
alias functionNum R1;

//Get free page
if (functionNum == 1) then
  label:
  //Incrementing WAIT_MEM_COUNT
  [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

  //While memory is full -- MEM_FREE_COUNT = 0
  while ([SYSTEM_STATUS_TABLE + 2]==0) do
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4]=WAIT_MEM;
    //Scheduling other process
    backup;
    call MOD_5;
    restore;
  endwhile;

  //Decrementing WAIT_MEM_COUNT
  [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;

  //Decrementing MEM_FREE_COUNT
  [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

  //Finding free page in memory free list
  alias iter R0;
  iter = 76;
  while(iter<128) do
    if ( [MEMORY_FREE_LIST + iter] == 0) then
      //Setting entry to 1 and returning the page number
      [MEMORY_FREE_LIST + iter] = 1;
      return;
    endif;
    iter = iter + 1;
  endwhile;
  goto label;
endif;


//Release page
if (functionNum == 2) then
  backup;
  alias pageNumToRelease R2;
  //Decrease entry in MEMORY_FREE_LIST
  [MEMORY_FREE_LIST + pageNumToRelease] = [MEMORY_FREE_LIST + pageNumToRelease] - 1;
  // Checking if page is free (mem free list entry = 0)
  if ([MEMORY_FREE_LIST + pageNumToRelease] == 0) then
    //Incrementing MEM_FREE_COUNT
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    //Setting processs in WAIT_MEM to READY
    alias iter R3;
    iter = 0;
    while(iter<16) do
      if ([PROCESS_TABLE + iter*16 + 4]==WAIT_MEM) then
        [PROCESS_TABLE + iter*16 + 4] = READY;
      endif;
      iter = iter + 1;
    endwhile;
  endif;
  restore;
  return;
endif;

//Get free block
if (functionNum == 3) then
  alias iter R3;
  iter = DISK_FREE_AREA;
  while (iter<DISK_SWAP_AREA) do
    //If a block is free
    if ([DISK_FREE_LIST + iter] == 0) then
      [DISK_FREE_LIST + iter] = 1;
      //Returning the block number
      R0 = iter;
      return;
    endif;
    iter = iter + 1;
  endwhile;
  //No free blocks
  R0 = -1;
  return;
endif;


//Release block
if (functionNum == 4) then
  alias blockNum R2;
  [DISK_FREE_LIST + blockNum] = [DISK_FREE_LIST + blockNum] - 1;
  return;
endif;

//Get code page
if (functionNum == 5) then
  alias blockNum R2;
  //Checking disk map entries of all process for block number
  alias iter R4;
  iter = 0;
  while (iter<16) do
    alias iter_entry R5;
    iter_entry = 0;
    while(iter_entry<4) do
      if ([DISK_MAP_TABLE + iter*10 + 4 + iter_entry] == blockNum) then
        if ( [PAGE_TABLE_BASE + iter*20 + 8 + 2*iter_entry + 1] != "0000") then
          //Returning memory page number
          R0 = [PAGE_TABLE_BASE + iter*20 + 8 + 2*iter_entry];
          //Incrementing mem free list -- page is shared by another process now
          [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
          return;
        endif;
      endif;
      iter_entry = iter_entry + 1;
    endwhile;
  iter = iter + 1;
  endwhile;
  alias free_page R6;
  multipush(R0, R1, R2, R3, R4, R5);
  // Function number of get free page in memory manager -- 1
  R1 = 1;
  call MOD_2;
  free_page = R0;
  multipop(R0, R1, R2, R3, R4, R5);
  multipush(R0, R1, R2, R3, R4, R5, R6);
  //Disk load function in device manager module
  R1 = 2;
  R4 = blockNum; //R4 = R2
  R2 = [SYSTEM_STATUS_TABLE+1];
  R3 = free_page; //R3 = R6

  call MOD_4;
  multipop(R0, R1, R2, R3, R4, R5, R6);

  //Returning the memory page number to which code page was loaded
  R0 = free_page;
  return;
endif;

//Get swap block
if (functionNum==6) then
  alias iter R3;
  iter = DISK_SWAP_AREA;
  while (iter<DISK_SIZE) do
    //If a block is free
    if ([DISK_FREE_LIST + iter] == 0) then
      [DISK_FREE_LIST + iter] = 1;
      //Returning the block number
      R0 = iter;
      return;
    endif;
    iter = iter + 1;
  endwhile;
  //If no free blocks
  R0 = -1;
  return;
endif;
