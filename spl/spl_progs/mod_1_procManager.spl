//Get PCB entry - 1, Free User Area Page-2 , Exit Process-3 , Free Page Table-4, Kill all -5

alias functionNum R1;
alias currentPID R2;

//Get PCB entry
if (functionNum==1) then
  alias iter R3;
  iter = 0;
  while (iter<16) do
    //Getting the entry number of first terminated process
    if ([PROCESS_TABLE + iter*16 + 4] == TERMINATED) then
      [PROCESS_TABLE + iter*16 + 1] = iter;
      [PROCESS_TABLE + iter*16 + 4] = ALLOCATED;
      [PROCESS_TABLE + iter*16 + 14] = PAGE_TABLE_BASE + iter*20;
      [PROCESS_TABLE + iter*16 + 15] = 10;
      R0 = iter;
      return;
    endif;
    iter = iter + 1;
  endwhile;
  R0 = -1;
  return;
endif;


///Free User Area Page
if (functionNum==2) then
  alias iter R3;
  iter = 0;
  while (iter<8) do
    //Last 16 words of the User Area Page is used for per process resource table
    alias res_table_entry R4;
    res_table_entry = [PROCESS_TABLE + currentPID*16 + 11]*512 + 496 + 2*iter;
    if ([res_table_entry] == SEMAPHORE) then
      alias sem_id R5;
      sem_id = [res_table_entry + 1];
      //Calling release semaphore
      multipush(R0, R1, R2, R3, R4, R5);
      R1 = 7;
      R2 = currentPID;
      R3 = sem_id;
      call MOD_0;
      multipop(R0, R1, R2, R3, R4, R5);
    endif;

    if ([res_table_entry] == FILE) then
      alias open_tab_index R5;
      open_tab_index = [res_table_entry + 1];
      //Calling close function
      multipush(R0,R1,R2,R3,R4,R5);
      R1 = 4;
      R2 = open_tab_index;
      call MOD_3;
      multipop(R0,R1,R2,R3,R4,R5);
    endif;

    iter = iter + 1;
  endwhile;

  //Invoking Release page
  multipush(R0, R1, R2);
  R1 = 2;
  R2 = [PROCESS_TABLE + currentPID*16 + 11];
  call  MOD_2;
  multipop(R0, R1, R2);
  return;
endif;

//Exit Process
if (functionNum==3) then
  alias kill_pid R2;
  if ([PROCESS_TABLE + kill_pid*16 + 9] != 9) then
    alias iter R3;
    iter = 0;
    //Wake up all processes waiting for the current process
    while(iter<16) do
      if ( [PROCESS_TABLE + iter*16 + 4] == WAIT_PROCESS ) then
        if ( [PROCESS_TABLE + iter*16 + 5] == kill_pid) then
          [PROCESS_TABLE + iter*16 + 4] = READY;
          [PROCESS_TABLE + iter*16 + 5] = -1;
        endif;
      endif;

      //Set the children of the process as Orphan
      if ( [PROCESS_TABLE + iter*16 + 2] == kill_pid ) then
        [PROCESS_TABLE + iter*16 + 2] = -1;
      endif;

      iter = iter + 1;
    endwhile;
  endif;

  //Invoking free Page Table
  multipush(R0, R1, R2);
  R1 = 4;
  R2 = kill_pid;
  call  MOD_1;
  multipop(R0, R1, R2);

  //Invoking free user area page
  multipush(R0, R1, R2);
  R1 = 2;
  R2 = kill_pid;
  call  MOD_1;
  multipop(R0, R1, R2);

  //Setting state as TERMINATED
  [PROCESS_TABLE + kill_pid*16 +4] = TERMINATED;
  return;
endif;

//Free Page Table
if (functionNum==4) then
  //Invalidating library pages
  [PAGE_TABLE_BASE + currentPID*20 +0] = -1;
  [PAGE_TABLE_BASE + currentPID*20 +1] = "0000";
  [PAGE_TABLE_BASE + currentPID*20 +2] = -1;
  [PAGE_TABLE_BASE + currentPID*20 +3] = "0000";

  alias iter R3;
  iter = 2;
  while(iter<10) do
    //Invoking Release Page if page is valid
    if ([PAGE_TABLE_BASE + currentPID*20 + 2*iter + 1]!= "0000") then
      multipush(R0, R1, R2, R3);
      R1 = 2;
      R2 = [PAGE_TABLE_BASE + currentPID*20 + 2*iter];
      call  MOD_2;
      multipop(R0, R1, R2, R3);
      // Invalidating the page table entry
      [PAGE_TABLE_BASE + currentPID*20 + 2*iter + 1] = "0000";
    endif;
    iter = iter+1;
  endwhile;


  alias disk_map_proc R4;
  disk_map_proc = DISK_MAP_TABLE + currentPID*10;
  //Looping through disk map table entry of process to set entries to -1
  iter = 0;
  while (iter <10) do
    //If valid and stack/heap then release block before setting to -1
    if ([disk_map_proc + iter]!=-1) then
      if (iter==2 || iter == 3 || iter==8 || iter==9) then
        //Calling Release Block
        multipush(R0, R1, R2, R3, R4);
        R1 = 4;
        R3 = currentPID;
        R2 = [disk_map_proc + iter];
        call MOD_2;
        multipop(R0, R1, R2, R3, R4);
      endif;
    endif;
    // Setting entry to -1
    [disk_map_proc + iter] = -1;
    iter = iter + 1;
  endwhile;
  return;
endif;

//Kill all
if (functionNum==5) then
  alias iter R3;

  iter = 0;
  //Locking all files
  while(iter<60) do
    if ( [INODE_TABLE + iter*16 + 1] != -1) then
      //Acquire inode
      multipush(R0,R1,R2,R3);
      R1 = 4;
      R2 = currentPID;
      R3 = iter;
      call MOD_0;
      multipop(R0,R1,R2,R3);
    endif;
    iter = iter + 1;
  endwhile;

  //Looping through process (pid = 2 to MAX_PROC_NUM-1)
  iter = 2;
  while (iter < MAX_PROC_NUM) do
    if ( (iter!= currentPID) && [PROCESS_TABLE + iter*16 + 4]!=TERMINATED) then
      multipush(R0, R1, R2, R3);
      R1 = 3;
      R2 = iter;
      call MOD_1;
      multipop(R0, R1, R2, R3);
    endif;
    iter = iter + 1;
  endwhile;

  iter = 0;
  //Unlocking all valid entry in inode table
  while(iter<60) do
    if ( [INODE_TABLE + iter*16 + 1] != -1) then
      //Release inode
      multipush(R0,R1,R2,R3);
      R1 = 5;
      R2 = currentPID;
      R3 = iter;
      call MOD_0;
      multipop(R0,R1,R2,R3);
    endif;
    iter = iter + 1;
  endwhile;

  return;
endif;
