alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

// Storing BP into kernel stack

multipush(BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID*16;

[process_table_entry + 12] = SP%512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


alias newPID R2;
alias pte R3;
alias temp_pid R5;


// Default new process is set as idle
newPID = 0;

temp_pid = currentPID+1;

//If Paging is ongoing
if ([SYSTEM_STATUS_TABLE + 5]!=0) then
  //If swapper process is not blocked
  alias swapper_pte R8;
  swapper_pte = PROCESS_TABLE + 15*16;
  if ( [swapper_pte + 4]==READY || [swapper_pte + 4]==RUNNING || [swapper_pte + 4]==CREATED) then
    //Schedule swapper daemon
    newPID = 15;
  endif;
else
  //paging off select non swapped process excluding swapper daemon
  while(temp_pid < 15) do
    alias temp R4;
    temp = PROCESS_TABLE + temp_pid*16;
    if((([temp + 4] == READY) || ([temp + 4] == CREATED)) && ([temp + 6] == 0)) then
      newPID=temp_pid;
      break;
    endif;
    temp_pid = temp_pid + 1;
  endwhile;
endif;


alias new_process_table R7;
new_process_table = PROCESS_TABLE + newPID*16;

SP = [new_process_table + 11]*512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE+1] = newPID;

if ([new_process_table + 4] == CREATED) then
    SP = [new_process_table + 13];
    //Setting BP to the value stored at the beginning of the kernel stack
    BP = [[new_process_table + 11]*512];
    [new_process_table + 4] = RUNNING;
    // Mode flag to 0
    [new_process_table + 9] = 0;
    //scheduler directly starts execution in user mode
    ireturn;
endif;

[new_process_table + 4] = RUNNING;

//Restoring BP from kernel stack
multipop(BP);

return;
