alias functionNum R1;
alias currentPID R2;

//Acquire disk
if (functionNum==3) then
  // While disk is in use
  while ([DISK_STATUS_TABLE]==1) do
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
    call MOD_5;
  endwhile;
  [DISK_STATUS_TABLE] = 1;
  [DISK_STATUS_TABLE + 4] = currentPID;
  return;
endif;

//Acquire Semaphore
if (functionNum==6) then
  alias iter R3;
  iter = 0;
  //MAX_SEM_COUNT = 32;
  while (iter<32) do
    if( [SEMAPHORE_TABLE + iter*4 + 1] == 0) then
      //Incrementing process count;
      [SEMAPHORE_TABLE + iter*4 + 1] = 1;
      //Setting locking PID field to -1;
      [SEMAPHORE_TABLE + iter*4] = -1;
      break;
    endif;
    iter = iter + 1;
  endwhile;

  //If no entries are free
  if (iter==32) then
    R0 = -1;
    return;
  endif;

  R0 = iter;
  return;
endif;

//Release Semaphore
if (functionNum==7) then
  alias st_index R3;
  //If locking PID matches PID provided
  if ([SEMAPHORE_TABLE + st_index*4] == currentPID) then
    //Setting locking PID to -1 -- unlocking before release
    [SEMAPHORE_TABLE + st_index*4] = -1;

    alias iter R4;
    iter = 0;
    while(iter<16) do
      if ( ([PROCESS_TABLE + iter*16 + 4] == WAIT_SEMAPHORE) && ([PROCESS_TABLE + iter*16 + 5] == st_index) ) then
        [PROCESS_TABLE + iter*16 + 4] = READY;
        [PROCESS_TABLE + iter*16 + 5] = -1;
      endif;
      iter = iter + 1;
    endwhile;
  endif;
  //Decrement process count
  [SEMAPHORE_TABLE + st_index*4 + 1] = [SEMAPHORE_TABLE + st_index*4 + 1] - 1;
  return;
endif;


//Acquire Terminal
if (functionNum==8) then
  while ([TERMINAL_STATUS_TABLE]==1) do
    [PROCESS_TABLE + currentPID*16 + 4]=WAIT_TERMINAL;
    multipush(R1, R2);
    call MOD_5;
    multipop(R1, R2);
  endwhile;
  [TERMINAL_STATUS_TABLE]=1;
  [TERMINAL_STATUS_TABLE + 1]=currentPID;
  return;
endif;

//Release Terminal
if(functionNum==9) then
  //If pid of process using terminal and to be scheduled dont match
  if (currentPID != [TERMINAL_STATUS_TABLE+1]) then
    //Set return value as -1
    R0 = -1;
    return;
  endif;
  [TERMINAL_STATUS_TABLE]=0;

  //Set all process with status wait_terminal as ready
  alias iter R4;
  iter = 1;
  while (iter<=15) do
    if ([PROCESS_TABLE + iter*16 + 1] != -1) then
      if ([PROCESS_TABLE + iter*16 + 4]==WAIT_TERMINAL) then
        [PROCESS_TABLE +iter*16 + 4] = READY;
      endif;
    endif;
    iter = iter + 1;
  endwhile;

  //Set return value as 0
  R0 = 0;
  return;
endif;
